package ru.bahusdivus.mtkauto;

import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;

import java.awt.*;
import java.awt.event.*;

import java.util.*;
import java.util.logging.*;
import java.util.List;

import java.text.*;

import java.io.*;

/**
 * Main working class.
 * TODO: May be, separate Parts and TOs completely
 * TODO: Extract showDialog() from inner class to separate function
 */
@SuppressWarnings("ALL")
class MTKFrame extends JFrame {

    private DeleteCellRenderer deleteCellRenderer = new DeleteCellRenderer();
    private DeleteCellEditor deleteCellEditor = new DeleteCellEditor();
    private ArrayList<JButton> topButtons = new ArrayList<>();
    private ArrayList<JButton> carButtons = new ArrayList<>();
    private JPanel carPanel;
    private int activeTopBtn = 1;
    private int activeCarBtn = 1;
    private NewCarDialog newCarDialog = null;
    private DbHandler dbHandler;
    private JTable table = null;
    private File propertiesFile;
    private Properties settings;
    private JLabel resultLbl;
    private JTextField fromDate;
    private JTextField toDate;
    private Logger logger;


    MTKFrame() {
        try {

            //get connection, creat tables if not exist
            dbHandler = DbHandler.getInstance();
            dbHandler.creatDB();

            if (System.getProperty("java.util.logging.config.class") == null && System.getProperty("java.util.logging.config.file") == null) {
                try {
                    logger = Logger.getLogger(MTKFrame.class.getName());
                    logger.setLevel(Level.ALL);
                    final int LOG_ROTATION_COUNT = 10;
                    Handler handler = new FileHandler("%h/mtkauto.log", 0, LOG_ROTATION_COUNT);
                    logger.addHandler(handler);
                } catch (IOException e) {
                    logger.log(Level.SEVERE, "Can't create log file handler", e);
                }
            }


            //Creat 3 row panel in NORT of frame
            JPanel midPanel = new JPanel();
            midPanel.setLayout(new GridLayout(3, 1));

            //First row. 4 "state" buttons
            JPanel topPanel = new JPanel();
            topPanel.setLayout(new GridLayout(1, 4));
            JButton remontButton = new JButton("Ремонт тягачей и п/прицепов");
            remontButton.setEnabled(false);
            remontButton.addActionListener(event -> setActiveTopBtn(1));
            JButton tyreButton = new JButton("Шины");
            tyreButton.addActionListener(event -> setActiveTopBtn(2));
            JButton akbButton = new JButton("АКБ");
            akbButton.addActionListener(event -> setActiveTopBtn(3));
            JButton toButton = new JButton("ТО");
            toButton.addActionListener(event -> setActiveTopBtn(4));

            //Adding buttons to panel and to array list for later access
            topPanel.add(remontButton);
            topPanel.add(tyreButton);
            topPanel.add(akbButton);
            topPanel.add(toButton);
            topButtons.add(remontButton);
            topButtons.add(tyreButton);
            topButtons.add(akbButton);
            topButtons.add(toButton);

            midPanel.add(topPanel);

            //Second row. Generated by function cars buttons
            carPanel = new JPanel();
            makeCarPanel();
            midPanel.add(carPanel);

            //Third row. Buttons, related to cars
            JPanel carActionPanel = new JPanel();
            carActionPanel.setLayout(new GridLayout(1, 3));

            JButton newCarBtn = new JButton("Добавить машину");
            newCarBtn.addActionListener(new NewCar());
            carActionPanel.add(newCarBtn);

            JLabel spacerLabel = new JLabel("");
            carActionPanel.add(spacerLabel);

            JButton delCarBtn = new JButton("Удалить машину");
            delCarBtn.addActionListener(new delCar());
            carActionPanel.add(delCarBtn);

            midPanel.add(carActionPanel);
            add(midPanel, BorderLayout.NORTH);

            //Main content. Tables, generated by function
            setTable();
            JScrollPane scrollPane = new JScrollPane(table);
            add(scrollPane, BorderLayout.CENTER);

            //NORTH region, filter by date and "action" button, along with table calculations results
            JPanel botPanel = new JPanel();
            botPanel.setLayout(new GridLayout(2, 1));

            JPanel filterPanel = new JPanel();
            filterPanel.setLayout(new FlowLayout(FlowLayout.LEADING));

            // Filters work only together. Doesn't work if not filled properly
            // "After" filter
            JLabel fromDateLabel = new JLabel("Дата с:");
            fromDate = new JTextField();
            fromDate.setColumns(10);
            fromDate.getDocument().addDocumentListener(new DocumentListener() {
                public void changedUpdate(DocumentEvent e) {
                    makeFilter();
                }

                public void insertUpdate(DocumentEvent e) {
                    makeFilter();
                }

                public void removeUpdate(DocumentEvent e) {
                    makeFilter();
                }
            });

            // "Before" filter
            JLabel toDateLabel = new JLabel(" по: ");
            toDate = new JTextField();
            toDate.setColumns(10);
            toDate.getDocument().addDocumentListener(new DocumentListener() {
                public void changedUpdate(DocumentEvent e) {
                    makeFilter();
                }

                public void insertUpdate(DocumentEvent e) {
                    makeFilter();
                }

                public void removeUpdate(DocumentEvent e) {
                    makeFilter();
                }
            });

            filterPanel.add(fromDateLabel);
            filterPanel.add(fromDate);
            filterPanel.add(toDateLabel);
            filterPanel.add(toDate);

            //JLabel with table calculations result
            resultLbl = new JLabel();
            filterPanel.add(resultLbl);

            botPanel.add(filterPanel);

            //"Add entry" button
            JButton addRow = new JButton("Добавить запись");
            addRow.addActionListener(new NewRow());
            botPanel.add(addRow);

            add(botPanel, BorderLayout.SOUTH);
            // END OF LAYOUT

            //Retrieving programm properties
            String userDir = System.getProperty("user.home");
            File propertiesDir = new File(userDir, ".mtkauto");
            if (!propertiesDir.exists()) propertiesDir.mkdir();
            propertiesFile = new File(propertiesDir, "program.properties");
            //Setting defaults
            Properties defaultSettings = new Properties();
            defaultSettings.setProperty("left", "0");
            defaultSettings.setProperty("top", "0");
            defaultSettings.setProperty("width", "1000");
            defaultSettings.setProperty("height", "600");
            defaultSettings.setProperty("lastBackupDate", "0");
            defaultSettings.setProperty("lastBackupN", "0");
            settings = new Properties(defaultSettings);
            if (propertiesFile.exists()) {
                try (InputStream in = new FileInputStream(propertiesFile)) {
                    settings.load(in);
                } catch (IOException ex) {
                    logger.log(Level.SEVERE, "Exception: ", ex);
                }
            }
            // Getting stored properties
            int left = Integer.parseInt(settings.getProperty("left"));
            int top = Integer.parseInt(settings.getProperty("top"));
            int width = Integer.parseInt(settings.getProperty("width"));
            int height = Integer.parseInt(settings.getProperty("height"));
            long lastBackupDate = Long.parseLong(settings.getProperty("lastBackupDate"));
            int lastBackupN = Integer.parseInt(settings.getProperty("lastBackupN"));
            setBounds(left, top, width, height);

            //If backup was created longer then day before, make new one. Rotation of 6 copies. Timestamp and number of last backup will store in properties
            long timestamp = System.currentTimeMillis();
            if ((lastBackupDate + 84600000L) < timestamp) {
                Boolean result = dbHandler.makeBackup(lastBackupN);
                if (result) {
                    if (lastBackupN < 5) {
                        lastBackupN++;
                    } else {
                        lastBackupN = 0;
                    }
                    settings.setProperty("lastBackupDate", "" + timestamp);
                    settings.setProperty("lastBackupN", "" + lastBackupN);
                }
            }

            // Store properties on exit
            addWindowListener(new WindowAdapter() {
                public void windowClosing(WindowEvent event) {
                    settings.setProperty("left", "" + getX());
                    settings.setProperty("top", "" + getY());
                    settings.setProperty("width", "" + getWidth());
                    settings.setProperty("height", "" + getHeight());
                    try (OutputStream out = new FileOutputStream(propertiesFile)) {
                        settings.store(out, "Program Properties");
                    } catch (IOException ex) {
                        logger.log(Level.SEVERE, "Exception: ", ex);
                    }
                    System.exit(0);
                }
            });

            setTitle("МТКАвто");

        } catch (Exception e) {
            logger.log(Level.SEVERE, "Exception: ", e);
        }

    }

    //Filtering for RowFilter of JTable
    private void makeFilter() {
        System.out.println("Filtering...");
        RowFilter<Object, Object> rf = null;
        List<RowFilter<Object, Object>> filters = new ArrayList<>(2);
        try {
            //For some reason, only full class path work here. I think, there is conflict
            filters.add(RowFilter.dateFilter(javax.swing.RowFilter.ComparisonType.AFTER, new SimpleDateFormat("dd.MM.yyyy").parse(fromDate.getText())));
            filters.add(RowFilter.dateFilter(javax.swing.RowFilter.ComparisonType.BEFORE, new SimpleDateFormat("dd.MM.yyyy").parse(toDate.getText())));
            rf = RowFilter.andFilter(filters);
        } catch (Exception e) {
            logger.log(Level.SEVERE, "Exception: ", e);
            return;
        }
        //There is 2 unsafe casts. Can't figure out, how to avoid
        if (activeTopBtn != 4) {
            ((TableRowSorter<PartsTableModel>) table.getRowSorter()).setRowFilter(rf);
        } else {
            ((TableRowSorter<ToTableModel>) table.getRowSorter()).setRowFilter(rf);
        }
    }

    // Little helper for making "Car" buttons. Creating button with given label, name and set ActionListener lambda
    private JButton makeCarBtn(String label, int id) {
        JButton button = new JButton(label);
        button.addActionListener(event -> setActiveCarBtn(id));
        button.setName(Integer.toString(id));
        return button;
    }

    //Making whole cars list. Setting button name = id for later usage.
    private void makeCarPanel() {
        //Clearing JPanel and buttons list before reuse
        carPanel.removeAll();
        carButtons.clear();
        List<Car> cars = dbHandler.getCars();
        boolean setActiveCarBtn = false;
        for (Car car : cars) {
            JButton button = makeCarBtn(car.getNumber(), car.getId());
            carPanel.add(button);
            carButtons.add(button);
            //First button will be initialised as active
            if (!setActiveCarBtn) {
                button.setEnabled(false);
                activeCarBtn = car.getId();
                setActiveCarBtn = true;
            }
        }
        //Repaint JPanel
        carPanel.revalidate();
        carPanel.repaint();
    }

    //Handling "state" buttons click
    private void setActiveTopBtn(int btn) {
        activeTopBtn = btn;
        setTable();
        int i = 1;
        for (JButton button : topButtons) {
            if (i == btn) {
                button.setEnabled(false);
            } else {
                button.setEnabled(true);
            }
            i++;
        }
    }

    //Handling "car" buttons click
    private void setActiveCarBtn(int btn) {
        System.out.println("Pressed: " + btn);
        activeCarBtn = btn;
        setTable();
        for (JButton button : carButtons) {
            if (Integer.parseInt(button.getName()) == btn) {
                button.setEnabled(false);
            } else {
                button.setEnabled(true);
            }
        }
    }

    //Making JTable.
    private void setTable() {
        // There is 2 different tables: one for parts, one for tos. Each have own TableModel. Depending on "state" buttons, picking one of them
        if (activeTopBtn != 4) {
            PartsTableModel newTM = new PartsTableModel(dbHandler.getParts(activeCarBtn, activeTopBtn));
            //If there is no rows, making empty table with default TableModel. Does it, because Default TableRowSorter throwing exception
            int mdlRowCount = newTM.getRowCount();
            if (mdlRowCount > 0) {
                //If no JTable, creating new one. Setting new TableModel otherwise
                if (table == null) {
                    table = new JTable(newTM);
                } else {
                    table.setModel(newTM);
                }
                //Movinge ID columt to the end. There will be "delete" button. May be better do it in Parts class
                table.moveColumn(0, table.getColumnCount() - 1);

                //Setting sorter
                table.setRowSorter(new TableRowSorter<>(newTM));

                TableColumnModel tcm = table.getColumnModel();
                //Setting renderer and editor for last column. This convert cell into "Delete" button
                tcm.getColumn(table.getColumnCount() - 1).setCellRenderer(deleteCellRenderer);
                tcm.getColumn(table.getColumnCount() - 1).setCellEditor(deleteCellEditor);
                //Remove unnecessary columns
                tcm.removeColumn(tcm.getColumn(1));
                tcm.removeColumn(tcm.getColumn(0));
            } else {
                if (table == null) {
                    table = new JTable(new DefaultTableModel());
                } else {
                    table.setModel(new DefaultTableModel());
                }
            }
        } else {
            //Same for ToTableModel
            ToTableModel newTM = new ToTableModel(dbHandler.getTOByCarId(activeCarBtn));
            int mdlRowCount = newTM.getRowCount();
            if (mdlRowCount > 0) {
                if (table == null) {
                    table = new JTable(newTM);
                } else {
                    table.setModel(newTM);
                }

                table.moveColumn(0, table.getColumnCount() - 1);
                table.setRowSorter(new TableRowSorter<>(newTM));
                TableColumnModel tcm = table.getColumnModel();
                tcm.getColumn(table.getColumnCount() - 1).setCellRenderer(deleteCellRenderer);
                tcm.getColumn(table.getColumnCount() - 1).setCellEditor(deleteCellEditor);
                tcm.removeColumn(tcm.getColumn(0));
            } else {
                if (table == null) {
                    table = new JTable(new DefaultTableModel());
                } else {
                    table.setModel(new DefaultTableModel());
                }
            }
        }

        //Setting table properties. Height is questionable, must fill all space
        table.setPreferredScrollableViewportSize(new Dimension(table.getPreferredSize().width, 370));
        table.setFillsViewportHeight(true);
        table.getTableHeader().setReorderingAllowed(false);

        //Setting selection mode
        table.setColumnSelectionAllowed(false);
        table.setRowSelectionAllowed(false);
        table.setCellSelectionEnabled(true);
        table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        //Setting selection Listeners
        SelectionHandler selectionListener = new SelectionHandler();
        table.getSelectionModel().addListSelectionListener(selectionListener);
        table.getColumnModel().getSelectionModel().addListSelectionListener(selectionListener);

        //Setting Default sorter and Date editor
        table.setAutoCreateRowSorter(true);
        table.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
        table.setDefaultEditor(Date.class, new DateEditor());

    }
    //END OF setTable()

    //Custom renderer for "Delete" cell, converting cell into JButton
    private class DeleteCellRenderer extends JButton implements TableCellRenderer {

        DeleteCellRenderer() {
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setText("Delete");
            return this;
        }
    }

    //Custom editor for "Delete" cell. On click fire fireEditingStopped(), cause execution setValueAt() in TableModel, wich handle deleting
    private class DeleteCellEditor extends DefaultCellEditor {
        private JButton button;
        private Object value;

        DeleteCellEditor() {
            super(new JCheckBox());

            button = new JButton();
            button.setOpaque(true);
            button.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    fireEditingStopped();
                }
            });
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            this.value = value;
            button.setText("Delete");
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            return value;
        }
    }

    // Listener class for deleting currently active car.
    private class delCar implements ActionListener {
        public void actionPerformed(ActionEvent event) {
            dbHandler.deleteCar(activeCarBtn);
            makeCarPanel();
        }
    }

    // Handling cells selection. If selected cells have numeric class, showing column header and summ in JLabel
    class SelectionHandler implements ListSelectionListener {
        public void valueChanged(ListSelectionEvent e) {
            resultLbl.setText("");

            int[] selectedRow = table.getSelectedRows();
            int[] selectedColumns = table.getSelectedColumns();

            for (int i = 0; i < selectedColumns.length; i++) {
                String header = table.getColumnName(selectedColumns[i]);
                int intSumm = 0;
                float floatSumm = 0f;
                long longSumm = 0l;

                for (int j = 0; j < selectedRow.length; j++) {
                    Object value = table.getValueAt(selectedRow[j], selectedColumns[i]);
                    if (value instanceof Integer) {
                        intSumm += (int) value;
                    } else if (value instanceof Float) {
                        floatSumm += (float) value;
                    } else if (value instanceof Long) {
                        longSumm += (long) value;
                    } else {
                        header = "";
                    }
                }
                if (!header.equals("")) {
                    resultLbl.setText(resultLbl.getText() + header + ": ");
                    if (intSumm > 0) resultLbl.setText(resultLbl.getText() + intSumm + " ");
                    if (floatSumm > 0) resultLbl.setText(resultLbl.getText() + floatSumm + " ");
                    if (longSumm > 0) resultLbl.setText(resultLbl.getText() + longSumm + " ");
                }
            }
        }
    }

    //Custom editor for columns of Date.class. Formatting text in cell with "dd.MM.yyyy" format
    class DateEditor extends DefaultCellEditor {
        JTextField textField;

        DateEditor() {
            super(new JTextField());
            textField = (JTextField) getComponent();
        }

        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            textField = (JTextField) super.getTableCellEditorComponent(table, value, isSelected, row, column);
            textField.setText(new SimpleDateFormat("dd.MM.yyyy").format((Date) value));
            return textField;
        }

        public Object getCellEditorValue() {
            textField = (JTextField) getComponent();
            return textField.getText();
        }

    }

    //TODO: May be, create superclass for this two TableModels?
    @SuppressWarnings("CanBeFinal")
    class PartsTableModel extends AbstractTableModel {

        String[] columnNames = {"",
                "Car ID",
                "Type",
                "Номенклатура",
                "Количество",
                "Стоимость",
                "Поставщик",
                "Дата установки",
                "Пробег, км"};

        @SuppressWarnings("CanBeFinal")
        private List<Part> data;

        PartsTableModel(List<Part> list) {
            data = list;
        }

        public int getColumnCount() {
            return columnNames.length;
        }

        public int getRowCount() {
            return data.size();
        }

        public String getColumnName(int col) {
            return columnNames[col];
        }

        public Object getValueAt(int row, int col) {
            return data.get(row).getPropertyByN(col);
        }

        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        public boolean isCellEditable(int row, int col) {
            return true;
        }

        public void setValueAt(Object value, int row, int col) {
            //Little cheat here. "col == 0" mean, we got "Delete" button pressed. So, instead saving, we deleting
            if (col == 0) {
                dbHandler.deletePart((int) value);
                setTable();
            } else {
                data.get(row).setPropertyByN(col, value);
                fireTableCellUpdated(row, col);
                dbHandler.savePart(data.get(row));
            }
        }

    }

    class ToTableModel extends AbstractTableModel {

        String[] columnNames = {"",
                "Car ID",
                "Наименование",
                "Марка",
                "Дата замены",
                "Пробег, км",
                "Следующая замена, км"};

        private List<TO> data;

        ToTableModel(List<TO> list) {
            data = list;
        }

        public int getColumnCount() {
            return columnNames.length;
        }

        public int getRowCount() {
            return data.size();
        }

        public String getColumnName(int col) {
            return columnNames[col];
        }

        public Object getValueAt(int row, int col) {
            return data.get(row).getPropertyByN(col);
        }

        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        public boolean isCellEditable(int row, int col) {
            return true;
        }

        public void setValueAt(Object value, int row, int col) {
            //Little cheat here. "col == 0" mean, we got "Delete" button pressed. So, instead saving, we deleting
            if (col == 0) {
                dbHandler.deleteTO((int) value);
                setTable();
            } else {
                data.get(row).setPropertyByN(col, value);
                fireTableCellUpdated(row, col);
                dbHandler.saveTO(data.get(row));
            }
        }

    }

    //Dialog for adding car. Will be shown and handled by NewCar.actionPerformed()
    class NewCarDialog extends JPanel {
        private JTextField number;
        private boolean ok;
        private JButton okButton;
        private JDialog dialog;

        NewCarDialog() {
            setLayout(new BorderLayout());

            JPanel panel = new JPanel();
            panel.setLayout(new GridLayout(1, 2));
            panel.add(new JLabel("Номер машины:"));
            panel.add(number = new JTextField(""));
            add(panel, BorderLayout.CENTER);

            okButton = new JButton("Ok");
            okButton.addActionListener(event -> {
                ok = true;
                dialog.setVisible(false);
            });

            JButton cancelButton = new JButton("Cancel");
            cancelButton.addActionListener(event -> dialog.setVisible(false));

            JPanel buttonPanel = new JPanel();
            buttonPanel.add(okButton);
            buttonPanel.add(cancelButton);
            add(buttonPanel, BorderLayout.SOUTH);

        }

        String getNumber() {
            return number.getText();
        }

        boolean showDialog(Component parent) {
            ok = false;

            Frame owner = null;
            if (parent instanceof Frame)
                owner = (Frame) parent;
            else
                owner = (Frame) SwingUtilities.getAncestorOfClass(Frame.class, parent);

            if (dialog == null || dialog.getOwner() != owner) {
                dialog = new JDialog(owner, true);
                dialog.add(this);
                dialog.getRootPane().setDefaultButton(okButton);
                dialog.pack();
            }

            dialog.setLocationRelativeTo(owner);
            dialog.setTitle("Номер машины");
            dialog.setVisible(true);
            return ok;
        }
    }

    //Listener for "Add car" button. Will bring up NewCarDialog.
    private class NewCar implements ActionListener {
        public void actionPerformed(ActionEvent event) {
            if (newCarDialog == null) newCarDialog = new NewCarDialog();
            if (newCarDialog.showDialog(MTKFrame.this)) {
                Car newCar = new Car(newCarDialog.getNumber());
                dbHandler.saveCar(newCar);
                makeCarPanel();
            }
        }
    }

    //New row dialog
    class NewRowDialog extends JPanel {

        //Shared fields
        private JTextField name;
        private JTextField date;
        private JTextField odometr;

        //Part's fields
        private JTextField value;
        private JTextField price;
        private JTextField dealer;

        //To's fields
        private JTextField model;
        private JTextField appointment;

        private boolean ok;
        private JButton okButton;
        private JDialog dialog;

        NewRowDialog() {
            setLayout(new BorderLayout());

            if (activeTopBtn != 4) {
                JPanel panel = new JPanel();
                panel.setLayout(new GridLayout(6, 2));

                panel.add(new JLabel("Номенклатура:"));
                panel.add(name = new JTextField(""));

                panel.add(new JLabel("Количество:"));
                panel.add(value = new JTextField(""));

                panel.add(new JLabel("Стоимость:"));
                panel.add(price = new JTextField(""));

                panel.add(new JLabel("Поставщик:"));
                panel.add(dealer = new JTextField(""));

                panel.add(new JLabel("Дата установки:"));
                panel.add(date = new JTextField(""));

                panel.add(new JLabel("Пробег, км:"));
                panel.add(odometr = new JTextField(""));

                add(panel, BorderLayout.CENTER);

            } else {
                JPanel panel = new JPanel();
                panel.setLayout(new GridLayout(5, 2));

                panel.add(new JLabel("Ноименование:"));
                panel.add(name = new JTextField(""));

                panel.add(new JLabel("Марка:"));
                panel.add(model = new JTextField(""));

                panel.add(new JLabel("Дата замены:"));
                panel.add(date = new JTextField(""));

                panel.add(new JLabel("Пробег, км:"));
                panel.add(odometr = new JTextField(""));

                panel.add(new JLabel("Следующая замена:"));
                panel.add(appointment = new JTextField(""));

                add(panel, BorderLayout.CENTER);
            }

            okButton = new JButton("Ok");
            okButton.addActionListener(event -> {
                ok = true;
                dialog.setVisible(false);
            });

            JButton cancelButton = new JButton("Cancel");
            cancelButton.addActionListener(event -> dialog.setVisible(false));

            JPanel buttonPanel = new JPanel();
            buttonPanel.add(okButton);
            buttonPanel.add(cancelButton);
            add(buttonPanel, BorderLayout.SOUTH);

        }


        //Return collected data on demand
        Part getPart() {
            try {
                Date dateObj = new SimpleDateFormat("dd.MM.yyyy").parse(date.getText());
                return new Part(activeCarBtn, activeTopBtn, name.getText(),
                        Integer.parseInt(value.getText()),
                        Float.parseFloat(price.getText()),
                        dealer.getText(), dateObj,
                        Integer.parseInt(odometr.getText()));
            } catch (ParseException e) {
                e.printStackTrace();
                return new Part();
            }
        }

        //Return collected data on demand
        TO getTO() {
            try {
                Date dateObj = new SimpleDateFormat("dd.MM.yyyy").parse(date.getText());
                return new TO(activeCarBtn, name.getText(), model.getText(), dateObj,
                        Integer.parseInt(odometr.getText()),
                        Long.parseLong(appointment.getText()));
            } catch (ParseException e) {
                e.printStackTrace();
                return new TO();
            }
        }

        boolean showDialog(Component parent) {
            ok = false;

            Frame owner = null;
            if (parent instanceof Frame)
                owner = (Frame) parent;
            else
                owner = (Frame) SwingUtilities.getAncestorOfClass(Frame.class, parent);

            if (dialog == null || dialog.getOwner() != owner) {
                dialog = new JDialog(owner, true);
                dialog.add(this);
                dialog.getRootPane().setDefaultButton(okButton);
                dialog.pack();
            }

            dialog.setLocationRelativeTo(owner);
            dialog.setTitle("Добавить запись");
            dialog.setVisible(true);
            return ok;
        }
    }

    //New row button listener. Will bring up NewRowDialog. Depends on "state", save Part or TO.
    private class NewRow implements ActionListener {
        public void actionPerformed(ActionEvent event) {
            NewRowDialog newRowDialog = new NewRowDialog();
            if (newRowDialog.showDialog(MTKFrame.this)) {
                if (activeTopBtn != 4) {
                    Part part = newRowDialog.getPart();
                    dbHandler.savePart(part);
                } else {
                    TO to = newRowDialog.getTO();
                    dbHandler.saveTO(to);
                }
                setTable();
            }
        }
    }

}
