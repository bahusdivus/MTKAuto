package ru.bahusdivus.mtkauto;

import javax.swing.*;
import javax.swing.RowFilter.ComparisonType;
import javax.swing.event.*;
import javax.swing.table.*;

import java.awt.*;
import java.awt.event.*;

import java.util.*;
import java.util.logging.*;
import java.util.List;

import java.text.*;

import java.io.*;

/**
 * Main working class.
 */

class MtkJFrame extends JFrame {

    private StateJPanel topPanel;
    private CarsJPanel carPanel;
    private FilterJPanel filterJPanel;
    private NewCarDialog newCarDialog;
    private DbHandler dbHandler;
    private MainJTable table;
    private Logger logger;


    MtkJFrame() {
        try {
            dbHandler = DbHandler.getInstance();
            dbHandler.creatDB();
        } catch (Exception e) {
            logger.log(Level.SEVERE, "Exception: ", e);
        }

        if (System.getProperty("java.util.logging.config.class") == null && System.getProperty("java.util.logging.config.file") == null) {
            try {
                logger = Logger.getLogger(MtkJFrame.class.getName());
                logger.setLevel(Level.ALL);
                final int LOG_ROTATION_COUNT = 5;
                Handler handler = new FileHandler("%h/mtkauto.log", 0, LOG_ROTATION_COUNT);
                logger.addHandler(handler);
            } catch (IOException e) {
                logger.log(Level.SEVERE, "Can't create log file handler", e);
            }
        }


        JPanel midPanel = new JPanel();
        midPanel.setLayout(new GridLayout(3, 1));

        //TODO: refactor to Factory, may be
        TopButtonsListener topButtonsListener = new TopButtonsListener();
        topPanel = new StateJPanel(topButtonsListener);
        midPanel.add(topPanel);

        CarButtonsListener carButtonsListener = new CarButtonsListener();
        carPanel = new CarsJPanel(carButtonsListener);
        midPanel.add(carPanel);

        //Third row. Buttons, related to cars
        JPanel carActionPanel = new JPanel();
        carActionPanel.setLayout(new GridLayout(1, 3));

        JButton newCarBtn = new JButton("Добавить машину");
        newCarBtn.addActionListener(new NewCar());
        carActionPanel.add(newCarBtn);

        JLabel spacerLabel = new JLabel("");
        carActionPanel.add(spacerLabel);

        JButton delCarBtn = new JButton("Удалить машину");
        delCarBtn.addActionListener(event -> carPanel.deleteActiveCar());
        carActionPanel.add(delCarBtn);

        midPanel.add(carActionPanel);
        add(midPanel, BorderLayout.NORTH);

        //NORTH region, filter by date and "action" button, along with table calculations results
        JPanel botPanel = new JPanel();
        botPanel.setLayout(new GridLayout(2, 1));


        FilterListener filterListener = new FilterListener();
        filterJPanel = new FilterJPanel(filterListener);
        botPanel.add(filterJPanel);


        //"Add entry" button
        JButton addRow = new JButton("Добавить запись");
        addRow.addActionListener(new NewRowListener());
        botPanel.add(addRow);

        add(botPanel, BorderLayout.SOUTH);

        //Main content. Tables, generated by function
        table = new MainJTable(carPanel, topPanel, filterJPanel);
        JScrollPane scrollPane = new JScrollPane(table);
        add(scrollPane, BorderLayout.CENTER);
        // END OF LAYOUT

        PropertiesHandler propertiesHandler = new PropertiesHandler();
        if (propertiesHandler.checkIsBackupNeed()) {
            if (dbHandler.makeBackup(propertiesHandler.getLatBackupN())) propertiesHandler.setLastBackup();
        }
        setBounds(propertiesHandler.getFrameRectangle());

        // Store properties on exit
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent event) {
                propertiesHandler.setFrameRectangle(getX(), getY(), getWidth(), getHeight());
                propertiesHandler.save();
                System.exit(0);
            }
        });

        setTitle("МТКАвто");


    }


    //Dialog for adding car. Will be shown and handled by NewCar.actionPerformed()
    class NewCarDialog extends JPanel {
        private JTextField number;
        private boolean ok;
        private JButton okButton;
        private JDialog dialog;

        NewCarDialog() {
            setLayout(new BorderLayout());

            JPanel panel = new JPanel();
            panel.setLayout(new GridLayout(1, 2));
            panel.add(new JLabel("Номер машины:"));
            panel.add(number = new JTextField(""));
            add(panel, BorderLayout.CENTER);

            okButton = new JButton("Ok");
            okButton.addActionListener(event -> {
                ok = true;
                dialog.setVisible(false);
            });

            JButton cancelButton = new JButton("Cancel");
            cancelButton.addActionListener(event -> dialog.setVisible(false));

            JPanel buttonPanel = new JPanel();
            buttonPanel.add(okButton);
            buttonPanel.add(cancelButton);
            add(buttonPanel, BorderLayout.SOUTH);

        }

        String getNumber() {
            return number.getText();
        }

        boolean showDialog(Component parent) {
            ok = false;

            Frame owner;
            if (parent instanceof Frame)
                owner = (Frame) parent;
            else
                owner = (Frame) SwingUtilities.getAncestorOfClass(Frame.class, parent);

            if (dialog == null || dialog.getOwner() != owner) {
                dialog = new JDialog(owner, true);
                dialog.add(this);
                dialog.getRootPane().setDefaultButton(okButton);
                dialog.pack();
            }

            dialog.setLocationRelativeTo(owner);
            dialog.setTitle("Номер машины");
            dialog.setVisible(true);
            return ok;
        }
    }

    //Listener for "Add car" button. Will bring up NewCarDialog.
    private class NewCar implements ActionListener {
        public void actionPerformed(ActionEvent event) {
            if (newCarDialog == null) newCarDialog = new NewCarDialog();
            if (newCarDialog.showDialog(MtkJFrame.this)) {
                Car newCar = new Car(newCarDialog.getNumber());
                dbHandler.saveCar(newCar);
                carPanel.makeCarButtons();
            }
        }
    }

    //New row dialog
    class NewRowDialog extends JPanel {

        //Shared fields
        private JTextField name;
        private JTextField date;
        private JTextField odometr;

        //Part's fields
        private JTextField value;
        private JTextField price;
        private JTextField dealer;

        //To's fields
        private JTextField model;
        private JTextField appointment;

        private boolean ok;
        private JButton okButton;
        private JDialog dialog;

        NewRowDialog() {
            setLayout(new BorderLayout());

            if (topPanel.getActiveTopButton() != 3) {
                JPanel panel = new JPanel();
                panel.setLayout(new GridLayout(6, 2));

                panel.add(new JLabel("Номенклатура:"));
                panel.add(name = new JTextField(""));

                panel.add(new JLabel("Количество:"));
                panel.add(value = new JTextField(""));

                panel.add(new JLabel("Стоимость:"));
                panel.add(price = new JTextField(""));

                panel.add(new JLabel("Поставщик:"));
                panel.add(dealer = new JTextField(""));

                panel.add(new JLabel("Дата установки:"));
                panel.add(date = new JTextField(""));

                panel.add(new JLabel("Пробег, км:"));
                panel.add(odometr = new JTextField("0"));

                add(panel, BorderLayout.CENTER);

            } else {
                JPanel panel = new JPanel();
                panel.setLayout(new GridLayout(5, 2));

                panel.add(new JLabel("Ноименование:"));
                panel.add(name = new JTextField(""));

                panel.add(new JLabel("Марка:"));
                panel.add(model = new JTextField(""));

                panel.add(new JLabel("Дата замены:"));
                panel.add(date = new JTextField(""));

                panel.add(new JLabel("Пробег, км:"));
                panel.add(odometr = new JTextField(""));

                panel.add(new JLabel("Следующая замена:"));
                panel.add(appointment = new JTextField(""));

                add(panel, BorderLayout.CENTER);
            }

            okButton = new JButton("Ok");
            okButton.addActionListener(event -> {
                ok = true;
                dialog.setVisible(false);
            });

            JButton cancelButton = new JButton("Cancel");
            cancelButton.addActionListener(event -> dialog.setVisible(false));

            JPanel buttonPanel = new JPanel();
            buttonPanel.add(okButton);
            buttonPanel.add(cancelButton);
            add(buttonPanel, BorderLayout.SOUTH);

        }


        //Return collected data on demand
        Part getPart() {
            try {
                Date dateObj = new SimpleDateFormat("dd.MM.yyyy").parse(date.getText());
                return new Part(carPanel.getActiveCarBtn(), topPanel.getActiveTopButton(), name.getText(),
                        Integer.parseInt(value.getText()),
                        Float.parseFloat(price.getText()),
                        dealer.getText(), dateObj,
                        Integer.parseInt(odometr.getText()));
            } catch (ParseException e) {
                e.printStackTrace();
                return new Part();
            }
        }

        //Return collected data on demand
        TO getTO() {
            try {
                Date dateObj = new SimpleDateFormat("dd.MM.yyyy").parse(date.getText());
                return new TO(carPanel.getActiveCarBtn(), name.getText(), model.getText(), dateObj,
                        Integer.parseInt(odometr.getText()),
                        Long.parseLong(appointment.getText()));
            } catch (ParseException e) {
                e.printStackTrace();
                return new TO();
            }
        }

        boolean showDialog(Component parent) {
            ok = false;

            Frame owner;
            if (parent instanceof Frame)
                owner = (Frame) parent;
            else
                owner = (Frame) SwingUtilities.getAncestorOfClass(Frame.class, parent);

            if (dialog == null || dialog.getOwner() != owner) {
                dialog = new JDialog(owner, true);
                dialog.add(this);
                dialog.getRootPane().setDefaultButton(okButton);
                dialog.pack();
            }

            dialog.setLocationRelativeTo(owner);
            dialog.setTitle("Добавить запись");
            dialog.setVisible(true);
            return ok;
        }
    }

    //New row button listener. Will bring up NewRowDialog. Depends on "state", save Part or TO.
    private class NewRowListener implements ActionListener {
        public void actionPerformed(ActionEvent event) {
            NewRowDialog newRowDialog = new NewRowDialog();
            if (newRowDialog.showDialog(MtkJFrame.this)) {
                if (topPanel.getActiveTopButton() != 3) {
                    Part part = newRowDialog.getPart();
                    ((PartsTableModel) table.getModel()).addRow(part);
                } else {
                    TO to = newRowDialog.getTO();
                    ((ToTableModel) table.getModel()).addRow(to);
                }
            }
        }
    }

    private class TopButtonsListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            int btn = Integer.parseInt(e.getActionCommand());
            topPanel.setActiveTopButton(btn);
            table.populateTable();
        }
    }

    private class CarButtonsListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            int btn = Integer.parseInt(e.getActionCommand());
            carPanel.setActiveCarBtn(btn);
            table.populateTable();
        }
    }

    private class FilterListener implements DocumentListener {
        @Override
        public void insertUpdate(DocumentEvent e) {
            makeFilter();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            makeFilter();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            makeFilter();
        }

        //Filtering for RowFilter of JTable
        private void makeFilter() {
            RowFilter<Object, Object> rf;
            List<RowFilter<Object, Object>> filters = new ArrayList<>(2);
            try {
                filters.add(RowFilter.dateFilter(ComparisonType.AFTER, new SimpleDateFormat("dd.MM.yyyy").parse(filterJPanel.getFromText())));
                filters.add(RowFilter.dateFilter(ComparisonType.BEFORE, new SimpleDateFormat("dd.MM.yyyy").parse(filterJPanel.getToText())));
                rf = RowFilter.andFilter(filters);
            } catch (Exception e) {
                return;
            }
            TableRowSorter<AbstractPartsAndToTableModel> tableRowSorter = table.getRowSorter();
            tableRowSorter.setRowFilter(rf);
            table.setRowSorter(tableRowSorter);
        }
    }

}
