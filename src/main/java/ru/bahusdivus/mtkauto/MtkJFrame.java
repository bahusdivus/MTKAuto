package ru.bahusdivus.mtkauto;

import javax.swing.*;
import javax.swing.RowFilter.ComparisonType;
import javax.swing.event.*;
import javax.swing.table.*;

import java.awt.*;
import java.awt.event.*;

import java.util.*;
import java.util.logging.*;
import java.util.List;

import java.text.*;

import java.io.*;

/**
 * Main working class.
 * TODO: Extract showDialog() from inner class to separate function
 */

class MtkJFrame extends JFrame {

    private DeleteCellRenderer deleteCellRenderer = new DeleteCellRenderer();
    private DeleteCellEditor deleteCellEditor = new DeleteCellEditor();

    private CarsJPanel carPanel;
    private FilterJPanel filterJPanel;
    private int activeTopBtn = 1;
    private NewCarDialog newCarDialog = null;
    private DbHandler dbHandler;
    private JTable table = null;
    private TableRowSorter<AbstractPartsAndToTableModel> tableRowSorter = null;

    private Logger logger;


    MtkJFrame() {
        try {
            dbHandler = DbHandler.getInstance();
            dbHandler.creatDB();
        } catch (Exception e) {
            logger.log(Level.SEVERE, "Exception: ", e);
        }

        if (System.getProperty("java.util.logging.config.class") == null && System.getProperty("java.util.logging.config.file") == null) {
            try {
                logger = Logger.getLogger(MtkJFrame.class.getName());
                logger.setLevel(Level.ALL);
                final int LOG_ROTATION_COUNT = 5;
                Handler handler = new FileHandler("%h/mtkauto.log", 0, LOG_ROTATION_COUNT);
                logger.addHandler(handler);
            } catch (IOException e) {
                logger.log(Level.SEVERE, "Can't create log file handler", e);
            }
        }


        JPanel midPanel = new JPanel();
        midPanel.setLayout(new GridLayout(3, 1));

        //TODO: refactor to Factory, may be
        TopButtonsListener topButtonsListener = new TopButtonsListener();
        StateJPanel topPanel = new StateJPanel(topButtonsListener);
        topButtonsListener.setTarget(topPanel);
        midPanel.add(topPanel);

        CarButtonsListener carButtonsListener = new CarButtonsListener();
        carPanel = new CarsJPanel(carButtonsListener);
        midPanel.add(carPanel);

        //Third row. Buttons, related to cars
        JPanel carActionPanel = new JPanel();
        carActionPanel.setLayout(new GridLayout(1, 3));

        JButton newCarBtn = new JButton("Добавить машину");
        newCarBtn.addActionListener(new NewCar());
        carActionPanel.add(newCarBtn);

        JLabel spacerLabel = new JLabel("");
        carActionPanel.add(spacerLabel);

        JButton delCarBtn = new JButton("Удалить машину");
        delCarBtn.addActionListener(event -> carPanel.deleteActiveCar());
        carActionPanel.add(delCarBtn);

        midPanel.add(carActionPanel);
        add(midPanel, BorderLayout.NORTH);

        //Main content. Tables, generated by function
        setTable();
        JScrollPane scrollPane = new JScrollPane(table);
        add(scrollPane, BorderLayout.CENTER);

        //NORTH region, filter by date and "action" button, along with table calculations results
        JPanel botPanel = new JPanel();
        botPanel.setLayout(new GridLayout(2, 1));


        FilterListener filterListener = new FilterListener();
        filterJPanel = new FilterJPanel(filterListener);
        botPanel.add(filterJPanel);


        //"Add entry" button
        JButton addRow = new JButton("Добавить запись");
        addRow.addActionListener(new NewRowListener());
        botPanel.add(addRow);

        add(botPanel, BorderLayout.SOUTH);
        // END OF LAYOUT

        PropertiesHandler propertiesHandler = new PropertiesHandler();
        if (propertiesHandler.checkIsBackupNeed()) {
            if (dbHandler.makeBackup(propertiesHandler.getLatBackupN())) propertiesHandler.setLastBackup();
        }
        setBounds(propertiesHandler.getFrameRectangle());

        // Store properties on exit
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent event) {
                propertiesHandler.setFrameRectangle(getX(), getY(), getWidth(), getHeight());
                propertiesHandler.save();
                System.exit(0);
            }
        });

        setTitle("МТКАвто");


    }

    //Filtering for RowFilter of JTable
    private void makeFilter() {
        RowFilter<Object, Object> rf;
        List<RowFilter<Object, Object>> filters = new ArrayList<>(2);
        try {
            filters.add(RowFilter.dateFilter(ComparisonType.AFTER, new SimpleDateFormat("dd.MM.yyyy").parse(filterJPanel.getFromText())));
            filters.add(RowFilter.dateFilter(ComparisonType.BEFORE, new SimpleDateFormat("dd.MM.yyyy").parse(filterJPanel.getToText())));
            rf = RowFilter.andFilter(filters);
        } catch (Exception e) {
            return;
        }
        tableRowSorter.setRowFilter(rf);
        table.setRowSorter(tableRowSorter);
    }

    //Making JTable.
    private void setTable() {

        AbstractPartsAndToTableModel newTM;
        // There is 2 different tables: one for parts, one for tos. Each have own TableModel. Depending on "state" buttons, picking one of them
        if (activeTopBtn != 4) {
            newTM = new PartsTableModel(dbHandler.getParts(carPanel.getActiveCarBtn(), activeTopBtn));
        } else {
            newTM = new ToTableModel(dbHandler.getTOByCarId(carPanel.getActiveCarBtn()));
        }
        //If there is no rows, making empty table with default TableModel. Does it, because Default TableRowSorter throwing exception
        int mdlRowCount = newTM.getRowCount();
        if (mdlRowCount > 0) {
            //If no JTable, creating new one. Setting new TableModel otherwise
            if (table == null) {
                table = new JTable(newTM);
            } else {
                table.setModel(newTM);
            }
            //Movinge ID columt to the end. There will be "delete" button. May be better do it in Parts class
            table.moveColumn(0, table.getColumnCount() - 1);

            //Setting sorter
            tableRowSorter = new TableRowSorter<>(newTM);
            table.setRowSorter(tableRowSorter);

            TableColumnModel tcm = table.getColumnModel();
            //Setting renderer and editor for last column. This convert cell into "Delete" button
            tcm.getColumn(table.getColumnCount() - 1).setCellRenderer(deleteCellRenderer);
            tcm.getColumn(table.getColumnCount() - 1).setCellEditor(deleteCellEditor);
            //Remove unnecessary columns
            tcm.removeColumn(tcm.getColumn(1));
            tcm.removeColumn(tcm.getColumn(0));
        } else {
            if (table == null) {
                table = new JTable(new DefaultTableModel());
            } else {
                table.setModel(new DefaultTableModel());
            }
        }

        //Setting table properties. Height is questionable, must fill all space
        table.setPreferredScrollableViewportSize(new Dimension(table.getPreferredSize().width, 370));
        table.setFillsViewportHeight(true);
        table.getTableHeader().setReorderingAllowed(false);

        //Setting selection mode
        table.setColumnSelectionAllowed(false);
        table.setRowSelectionAllowed(false);
        table.setCellSelectionEnabled(true);
        table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        //Setting selection Listeners
        SelectionHandler selectionListener = new SelectionHandler();
        table.getSelectionModel().addListSelectionListener(selectionListener);
        table.getColumnModel().getSelectionModel().addListSelectionListener(selectionListener);

        //Setting Default sorter and Date editor
        table.setAutoCreateRowSorter(true);
        table.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
        table.setDefaultEditor(Date.class, new DateEditor());

    }
    //END OF setTable()

    //Custom renderer for "Delete" cell, converting cell into JButton
    private class DeleteCellRenderer extends JButton implements TableCellRenderer {

        DeleteCellRenderer() {
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setText("Delete");
            return this;
        }
    }

    //Custom editor for "Delete" cell. On click fire fireEditingStopped(), cause execution setValueAt() in TableModel, wich handle deleting
    private class DeleteCellEditor extends DefaultCellEditor {
        private JButton button;
        private Object value;

        DeleteCellEditor() {
            super(new JCheckBox());

            button = new JButton();
            button.setOpaque(true);
            button.addActionListener(e -> fireEditingStopped());
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            this.value = value;
            button.setText("Delete");
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            return value;
        }
    }

    // Handling cells selection. If selected cells have numeric class, showing column header and summ in JLabel
    class SelectionHandler implements ListSelectionListener {
        public void valueChanged(ListSelectionEvent e) {

            filterJPanel.setResultLbl("");
            StringBuilder result = new StringBuilder();

            int[] selectedRows = table.getSelectedRows();
            int[] selectedColumns = table.getSelectedColumns();

            for (int selectedColumn : selectedColumns) {
                String header = table.getColumnName(selectedColumn);
                int intSumm = 0;
                float floatSumm = 0f;
                long longSumm = 0L;

                for (int selectedRow : selectedRows) {
                    Object value = table.getValueAt(selectedRow, selectedColumn);
                    if (value instanceof Integer) {
                        intSumm += (int) value;
                    } else if (value instanceof Float) {
                        floatSumm += (float) value;
                    } else if (value instanceof Long) {
                        longSumm += (long) value;
                    } else {
                        header = "";
                    }
                }
                if (!header.equals("")) {
                    result.append(header).append(": ");
                    if (intSumm > 0) result.append(intSumm).append(" ");
                    if (floatSumm > 0) result.append(floatSumm).append(" ");
                    if (longSumm > 0) result.append(longSumm).append(" ");
                }
            }
            filterJPanel.setResultLbl(result.toString());
        }
    }

    //Custom editor for columns of Date.class. Formatting text in cell with "dd.MM.yyyy" format
    class DateEditor extends DefaultCellEditor {
        JTextField textField;

        DateEditor() {
            super(new JTextField());
            textField = (JTextField) getComponent();
        }

        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            textField = (JTextField) super.getTableCellEditorComponent(table, value, isSelected, row, column);
            textField.setText(new SimpleDateFormat("dd.MM.yyyy").format((Date) value));
            return textField;
        }

        public Object getCellEditorValue() {
            textField = (JTextField) getComponent();
            return textField.getText();
        }

    }

    class PartsTableModel extends AbstractPartsAndToTableModel {

        String[] columnNames = {"",
                "Car ID",
                "Type",
                "Номенклатура",
                "Количество",
                "Стоимость",
                "Поставщик",
                "Дата установки",
                "Пробег, км"};

        private List<Part> data;

        PartsTableModel(List<Part> list) {
            data = list;
        }

        public int getColumnCount() {
            return columnNames.length;
        }

        public int getRowCount() {
            return data.size();
        }

        public String getColumnName(int col) {
            return columnNames[col];
        }

        public Object getValueAt(int row, int col) {
            return data.get(row).getPropertyByN(col);
        }

        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        public boolean isCellEditable(int row, int col) {
            return true;
        }

        public void childSetValueAt(Object value, int row, int col) {
            //Little cheat here. "col == 0" mean, we got "Delete" button pressed. So, instead saving, we deleting
            if (col == 0) {
                dbHandler.deletePart((int) value);
                setTable();
            } else {
                data.get(row).setPropertyByN(col, value);
                fireTableCellUpdated(row, col);
                dbHandler.savePart(data.get(row));
            }
        }

    }

    class ToTableModel extends AbstractPartsAndToTableModel {

        String[] columnNames = {"",
                "Car ID",
                "Наименование",
                "Марка",
                "Дата замены",
                "Пробег, км",
                "Следующая замена, км"};

        private List<TO> data;

        ToTableModel(List<TO> list) {
            data = list;
        }

        public int getColumnCount() {
            return columnNames.length;
        }

        public int getRowCount() {
            return data.size();
        }

        public String getColumnName(int col) {
            return columnNames[col];
        }

        public Object getValueAt(int row, int col) {
            return data.get(row).getPropertyByN(col);
        }

        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        public boolean isCellEditable(int row, int col) {
            return true;
        }

        public void childSetValueAt(Object value, int row, int col) {
            //Little cheat here. "col == 0" mean, we got "Delete" button pressed. So, instead saving, we deleting
            if (col == 0) {
                dbHandler.deleteTO((int) value);
                setTable();
            } else {
                data.get(row).setPropertyByN(col, value);
                fireTableCellUpdated(row, col);
                dbHandler.saveTO(data.get(row));
            }
        }

    }

    //Dialog for adding car. Will be shown and handled by NewCar.actionPerformed()
    class NewCarDialog extends JPanel {
        private JTextField number;
        private boolean ok;
        private JButton okButton;
        private JDialog dialog;

        NewCarDialog() {
            setLayout(new BorderLayout());

            JPanel panel = new JPanel();
            panel.setLayout(new GridLayout(1, 2));
            panel.add(new JLabel("Номер машины:"));
            panel.add(number = new JTextField(""));
            add(panel, BorderLayout.CENTER);

            okButton = new JButton("Ok");
            okButton.addActionListener(event -> {
                ok = true;
                dialog.setVisible(false);
            });

            JButton cancelButton = new JButton("Cancel");
            cancelButton.addActionListener(event -> dialog.setVisible(false));

            JPanel buttonPanel = new JPanel();
            buttonPanel.add(okButton);
            buttonPanel.add(cancelButton);
            add(buttonPanel, BorderLayout.SOUTH);

        }

        String getNumber() {
            return number.getText();
        }

        boolean showDialog(Component parent) {
            ok = false;

            Frame owner;
            if (parent instanceof Frame)
                owner = (Frame) parent;
            else
                owner = (Frame) SwingUtilities.getAncestorOfClass(Frame.class, parent);

            if (dialog == null || dialog.getOwner() != owner) {
                dialog = new JDialog(owner, true);
                dialog.add(this);
                dialog.getRootPane().setDefaultButton(okButton);
                dialog.pack();
            }

            dialog.setLocationRelativeTo(owner);
            dialog.setTitle("Номер машины");
            dialog.setVisible(true);
            return ok;
        }
    }

    //Listener for "Add car" button. Will bring up NewCarDialog.
    private class NewCar implements ActionListener {
        public void actionPerformed(ActionEvent event) {
            if (newCarDialog == null) newCarDialog = new NewCarDialog();
            if (newCarDialog.showDialog(MtkJFrame.this)) {
                Car newCar = new Car(newCarDialog.getNumber());
                dbHandler.saveCar(newCar);
                carPanel.makeCarButtons();
            }
        }
    }

    //New row dialog
    class NewRowDialog extends JPanel {

        //Shared fields
        private JTextField name;
        private JTextField date;
        private JTextField odometr;

        //Part's fields
        private JTextField value;
        private JTextField price;
        private JTextField dealer;

        //To's fields
        private JTextField model;
        private JTextField appointment;

        private boolean ok;
        private JButton okButton;
        private JDialog dialog;

        NewRowDialog() {
            setLayout(new BorderLayout());

            if (activeTopBtn != 4) {
                JPanel panel = new JPanel();
                panel.setLayout(new GridLayout(6, 2));

                panel.add(new JLabel("Номенклатура:"));
                panel.add(name = new JTextField(""));

                panel.add(new JLabel("Количество:"));
                panel.add(value = new JTextField(""));

                panel.add(new JLabel("Стоимость:"));
                panel.add(price = new JTextField(""));

                panel.add(new JLabel("Поставщик:"));
                panel.add(dealer = new JTextField(""));

                panel.add(new JLabel("Дата установки:"));
                panel.add(date = new JTextField(""));

                panel.add(new JLabel("Пробег, км:"));
                panel.add(odometr = new JTextField("0"));

                add(panel, BorderLayout.CENTER);

            } else {
                JPanel panel = new JPanel();
                panel.setLayout(new GridLayout(5, 2));

                panel.add(new JLabel("Ноименование:"));
                panel.add(name = new JTextField(""));

                panel.add(new JLabel("Марка:"));
                panel.add(model = new JTextField(""));

                panel.add(new JLabel("Дата замены:"));
                panel.add(date = new JTextField(""));

                panel.add(new JLabel("Пробег, км:"));
                panel.add(odometr = new JTextField(""));

                panel.add(new JLabel("Следующая замена:"));
                panel.add(appointment = new JTextField(""));

                add(panel, BorderLayout.CENTER);
            }

            okButton = new JButton("Ok");
            okButton.addActionListener(event -> {
                ok = true;
                dialog.setVisible(false);
            });

            JButton cancelButton = new JButton("Cancel");
            cancelButton.addActionListener(event -> dialog.setVisible(false));

            JPanel buttonPanel = new JPanel();
            buttonPanel.add(okButton);
            buttonPanel.add(cancelButton);
            add(buttonPanel, BorderLayout.SOUTH);

        }


        //Return collected data on demand
        Part getPart() {
            try {
                Date dateObj = new SimpleDateFormat("dd.MM.yyyy").parse(date.getText());
                return new Part(carPanel.getActiveCarBtn(), activeTopBtn, name.getText(),
                        Integer.parseInt(value.getText()),
                        Float.parseFloat(price.getText()),
                        dealer.getText(), dateObj,
                        Integer.parseInt(odometr.getText()));
            } catch (ParseException e) {
                e.printStackTrace();
                return new Part();
            }
        }

        //Return collected data on demand
        TO getTO() {
            try {
                Date dateObj = new SimpleDateFormat("dd.MM.yyyy").parse(date.getText());
                return new TO(carPanel.getActiveCarBtn(), name.getText(), model.getText(), dateObj,
                        Integer.parseInt(odometr.getText()),
                        Long.parseLong(appointment.getText()));
            } catch (ParseException e) {
                e.printStackTrace();
                return new TO();
            }
        }

        boolean showDialog(Component parent) {
            ok = false;

            Frame owner;
            if (parent instanceof Frame)
                owner = (Frame) parent;
            else
                owner = (Frame) SwingUtilities.getAncestorOfClass(Frame.class, parent);

            if (dialog == null || dialog.getOwner() != owner) {
                dialog = new JDialog(owner, true);
                dialog.add(this);
                dialog.getRootPane().setDefaultButton(okButton);
                dialog.pack();
            }

            dialog.setLocationRelativeTo(owner);
            dialog.setTitle("Добавить запись");
            dialog.setVisible(true);
            return ok;
        }
    }

    //New row button listener. Will bring up NewRowDialog. Depends on "state", save Part or TO.
    private class NewRowListener implements ActionListener {
        public void actionPerformed(ActionEvent event) {
            NewRowDialog newRowDialog = new NewRowDialog();
            if (newRowDialog.showDialog(MtkJFrame.this)) {
                if (activeTopBtn != 4) {
                    Part part = newRowDialog.getPart();
                    dbHandler.savePart(part);
                } else {
                    TO to = newRowDialog.getTO();
                    dbHandler.saveTO(to);
                }
                setTable();
            }
        }
    }

    private class TopButtonsListener implements ActionListener {
        StateJPanel panel;

        void setTarget(StateJPanel panel) {
            this.panel = panel;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            int btn = Integer.parseInt(e.getActionCommand());
            panel.setActiveTopButton(btn);
            activeTopBtn = btn + 1;
            setTable();
        }
    }

    private class CarButtonsListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            int btn = Integer.parseInt(e.getActionCommand());
            carPanel.setActiveCarBtn(btn);
            setTable();
        }
    }

    private class FilterListener implements DocumentListener {
        @Override
        public void insertUpdate(DocumentEvent e) {
            makeFilter();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            makeFilter();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            makeFilter();
        }
    }

}
